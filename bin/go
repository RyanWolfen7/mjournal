#!/bin/bash
##### helper functions #####
autoinstall_wallah() {
  [[ -f wallah/bin/install_node ]] && return
  git submodule update --init --depth 1
}

autoinstall_npm_dependencies() {
  autoinstall_wallah
  ./wallah/bin/install_node
  [[ -d node_modules/express ]] && return
  npm install
}

autoinstall_bower_dependencies() {
  [[ -d bower_components/angular ]] && return
  ./node_modules/.bin/bower install
}

doc() {
  help="${help}$1
"
}

#The "help" variable gets extended by the "doc" function
#inline below as needed sort of javadoc/python decorator style
help=""
usage() {
  cat <<EOF
Usage: $(basename $0) <subcommand> [args…]

Purpose of $(basename $0) script
--------------------
* entrypoint script for common commands
* Automatically installs development prerequisites
* Ensures the correct PATH environment variable
* commands are grouped by lifecycle and described in more detail below

Development Commands
--------------------
${help}
EOF
}

doc "* express: start the express server"
task::express() {
  autoinstall_npm_dependencies
  autoinstall_bower_dependencies
  node-dev --debug=9091 app/server | tee -a logs/mjournal.log
}

doc "  * aliased as 'start' command as well"
task::start() {
  task::express "$@"
}

doc "* js: build and watch dev js via browserify"
task::js() {
  watchify --debug -o wwwroot/mjournal.js -e app/browser.js
}

doc "* test: run all the tests (mocha)
    * optionally pass file(s) to run only specific tests
    * pass --debug for node-inspector"
task::test() {
  set -e
  export NODE_ENV=test
  args="--slow 200 --reporter spec --colors --recursive --check-leaks"
  if [[ "${1}" == "--debug" ]]; then
    args="${args} --timeout 0 --debug-brk=9093"
    shift
  fi
  tests="$@"
  if [[ -z "${tests}" ]]; then
    tests=$(find app -type f -name '*.mocha.js' | xargs)
  fi
  echo -n "wiping test database…"
  app/db/wipe.js
  echo ✓
  echo -n "browserify…"
  ./bin/build_js.sh
  echo ✓
  echo "mocha tests…"
  mocha ${args} ${tests}
  printf "linting…"
  task::lint
  echo ✓
}

doc "* lint: run eslint code format checker"
task::lint() {
  eslint app bin migrations
}

_dockerfile() {
  ./bin/render_template.js deploy/Dockerfile.mustache > Dockerfile
}

# doc "* fig: bring up the full system via docker and fig"
# task::fig() {
#   _dockerfile
#   if [[ ! -e fig.yml ]]; then
#     #We might be running fig for the very first time,
#     #Try to ensure data volumes exist
#     source ./bin/provision_stage.sh
#   fi
#   ./bin/render_template.js deploy/fig.yml.mustache > fig.yml
#   fig "$@"
# }

dcip() {
  container=$(docker ps | egrep "\b$1\s*\$" | awk '{print $1}')
  docker inspect -f "{{ .NetworkSettings.IPAddress }}" "${container}"
}

doc "* figlog: tail the log file of the app in the fig container"
task::figlog() {
  chmod 0600 deploy/docker_insecure.key
  ssh \
    -i deploy/docker_insecure.key \
    -o UserKnownHostsFile=/dev/null \
    -o StrictHostKeyChecking=no \
    root@$(dcip mjournal_app_1) \
    tail -f /var/log/app.log
}

doc "
Release Management Commands
-------------------
"

doc "* release_candidate <major|minor|patch>: prepare develop branch for a release tag"
task::release_candidate() {
  set -e
  if [[ $(git status --short | wc -c | tr -d " ") != "0" ]]; then
    echo "Abort: working directory not clean"
    exit 11
  fi
  git checkout develop
  git pull origin master
  npm version -m "Bump version for %s release" "$@"
}

doc "  * aliased as 'rc'"
task::rc() {
  task::release_candidate "$@"
}

doc "* release: merge a tagged release candidate to master and push"
task::release() {
  git checkout master
  git merge develop
  git push --tags origin master
}

doc "
Deployment Commands
-------------------
"

doc "* clean: delete the build directory"
task::clean() {
  rm Dockerfile fig.yml wwwroot/*.js
}

doc "* build: render the Dockerfile then run a docker build"
task::build() {
  _dockerfile
  exec docker build --tag=mjournal .
}

doc "* stage <docker-image>: tag a docker image as 'stage' and run it on stage"
task::stage() {
  local registry=$(config3 registry)
  local app_name=$(config3 appName)
  local build="$1"
  docker tag -f "${build}" "${registry}/${app_name}:stage"
  ./bin/deploy.sh dbs
}

doc "* tag_production <docker-image>: tag a docker build for production"
task::tag_production() {
  local build="$1"
  local registry="$(config3 registry)"
  local app_name="$(config3 appName)"
  local base="${registry}/${app_name}"
  local version="$(config3 appVersion)"
  docker tag -f "${build}" "${base}:v${version}"
  docker tag -f "${build}" "${base}:production"
}

doc "* production: push and deploy to production"
task::production() {
  local registry="$(config3 registry)"
  local app_name="$(config3 appName)"
  local base="${registry}/${app_name}"
  local version="$(config3 appVersion)"
  local hostname="$(NODE_ENV=production config3 hostname)"
  echo "OK, in another terminal, connect the ssh tunnel:"
  echo "ssh -t dbs ssh -N -L 5000:localhost:5000 yoyo.peterlyons.com"
  echo "ENTER to continue when tunnel is up, CTRL-c to abort"
  read -n 1 confirm
  set -e
  docker push "${base}:v${version}"
  docker push "${base}:production"
  ssh "${hostname}" \
    env DOCKER_HOST=tcp://localhost:2375 docker pull "${base}:v${version}"
  ssh "${hostname}" \
    env DOCKER_HOST=tcp://localhost:2375 docker pull "${base}:production"
  echo "Everything is prepared and ready to go."
  echo "ENTER to go live (brief downtime). CTRL-c to abort."
  read -n 1 confirm
  NODE_ENV=production ./bin/deploy.sh "${hostname}"
}

##### main code #####
main() {
  cd $(dirname "$0")/..
  PATH="${PATH}:${PWD}/bin"
  PATH="${PATH}:${PWD}/node_modules/.bin"
  PATH="${PATH}:${PWD}/node/bin"
  #Need the basics like dirname et al
  PATH="${PATH}:/usr/bin:/bin"
  export PATH
  task_name="$1"
  if type "task::${task_name}" &>/dev/null; then
    shift
    eval "task::${task_name}" "$@"
  else
    usage "$@"
  fi
}

main "$@"
